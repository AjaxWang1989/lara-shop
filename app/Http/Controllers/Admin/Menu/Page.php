<?php
namespace App\Http\Controllers\Admin\Menu;

use App\Http\Controllers\Admin\Common\BasePage;
use App\Models\Menu;
use App\Models\Permission;
use App\Models\Role;
use App\Models\User;
use App\Renders\Form;
use App\Renders\Grid;
use App\Renders\Tree;
use App\Renders\Widgets\Tab;

class Page extends BasePage
{
    public function __construct()
    {
        $this->setBoxTitle('菜单管理');
        parent::__construct();
    }

    /**
     * Help message for icon field.
     *
     * @return string
     */
    protected function iconHelp()
    {
        return 'For more icons please see <a href="http://fontawesome.io/icons/" target="_blank">http://fontawesome.io/icons/</a>';
    }

    protected function buildForm(Form $form, $id = null): BasePage
    {
        if($id){
            $form->display('id', 'ID');
        }
        $form->select('parent_id', trans('admin.parent_id'))->options(Menu::selectOptions())->rules('integer',[
            'integer' => '父级菜单id必须为正整数']);
        $form->text('text', trans('admin.title'))->rules('required',['required' => '缺少菜单名称']);
        $form->icon('icon', trans('admin.icon'))->default('fa-bars')->rules('required', ['required' => '缺少图标'])->help($this->iconHelp());
        $form->text('url', trans('admin.uri'));
        $form->hidden('permission_id','权限');
        $form->multipleSelect('roles', trans('admin.roles'))->options(Role::where('id', '!=', User::SUPER_ADMIN_ID)->get()->pluck('display_name', 'id'));
        return parent::buildForm($form, $id); // TODO: Change the autogenerated stub
    }

    protected function filter(Grid\Filter $filter)
    {
        $filter->like('text', '标题');
        $filter->like('roles.display_name', '角色');
        $filter->like('permission.display_name', '权限');
    }

    protected function buildGrid(Grid $grid)
    {
        $grid->id('ID')->sortable();
        $grid->text('标题');
        $grid->icon('图标')->display(function ($value){
            return "<i class=\"fa fa-fw {$value} \"></i>";
        });
        $grid->column('permission.display_name', '权限');
        $grid->column('permission.id', '授权角色')->display(function ($id){
            $roleStr = '';
            $roles = Permission::find($id)->roles;
            if($roles && $roles->count() > 0){
                foreach ($roles as $role){
                    $roleStr .= "<span class='label label-success'>{$role['display_name']}</span>";
                }
                return $roleStr;
            }else{
                return "<span class='label label-default'>未开放</span>";
            }
        });
        $grid->with(['id' => 'menu-table']);
        return parent::buildGrid($grid); // TODO: Change the autogenerated stub
    }

    public function buildTab(Tab $tab): BasePage
    {
        $tab->add('菜单表单',$this->grid(), true)->add('菜单结构', $this->tree());
        return parent::buildTab($tab); // TODO: Change the autogenerated stub
    }

    public function buildTree(Tree $tree)
    {
        $tree->disableCreate();

        $tree->branch(function ($branch) {
            $payload = "<i class='fa {$branch['icon']}'></i>&nbsp;<strong>{$branch['text']}</strong>";

            if (!isset($branch['children'])) {
                if (url()->isValidUrl($branch['url'])) {
                    $url = $branch['url'];
                } else {
                    $url = admin_base_path($branch['url']);
                }

                $payload .= "&nbsp;&nbsp;&nbsp;<a href=\"$url\" class=\"dd-nodrag\">$url</a>";
            }

            return $payload;
        });
        return parent::buildTree($tree); // TODO: Change the autogenerated stub
    }
}