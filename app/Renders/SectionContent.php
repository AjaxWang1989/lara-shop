<?php

namespace App\Renders;

use App\Renders\Grid;
use App\Renders\Layout\Content;
use App\Renders\Layout\Css;
use App\Renders\Widgets\NavBar;
use App\Renders\Widgets\Tab;
use Closure;
use Encore\Admin\Layout\Row;
use Illuminate\Database\Eloquent\Model as EloquentModel;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Route;
use Illuminate\View\View;
use InvalidArgumentException;

/**
 * Class SectionContent.
 */
class SectionContent extends \Encore\Admin\Layout\Content
{
    /**
     * @var array
     */
    public static $script = [];

    /**
     * @var array
     */
    public static $css = [];

    /**
     * @var array
     */
    public static $js = [];

    /**
     * @var array
     */
    public static $link = [];

    /**
     * @var array
     */
    public static $extensions = [];

    /**
     * @var NavBar
     * */
    protected  $navBar = null;



    /**
     * @param $model
     * @param Closure $callable
     *
     * @return Grid
     */
    public function grid($model, Closure $callable) : Grid
    {
        return new Grid($this->getModel($model), $callable);
    }


    public function tab(Closure $closure) : Tab
    {
        (!($tab = new Tab())) ? : call_user_func($closure, $tab);
        return $tab;
    }

    /**
     * @param $model
     * @param Closure $callable
     *
     * @return Form
     */
    public function form($model, Closure $callable) : Form
    {
        return new Form($this->getModel($model), $callable);
    }

    /**
     * Build a tree.
     *
     * @param $model
     *
     * @return Tree
     */
    public function tree($model, Closure $callable = null) : Tree
    {
        return new Tree($this->getModel($model), $callable);
    }

    /**
     * @param Closure $callable
     *
     * @return \App\Renders\Layout\Content
     */
    public function content(Closure $callable = null) : Content
    {
        return new Content($callable);
    }

    protected function addRow(Row $row)
    {
        parent::addRow($row); // TODO: Change the autogenerated stub
    }

    /**
     * Add css or get all css.
     *
     * @param string $css
     * @param bool $link
     * @return string|voids
     */
    public  function css($css = null)
    {
        if(!is_null($css)){
            static::$css[md5($css)] = new Css($css, false);
        }
        static::$css = array_unique(static::$css);
        if($css == null){
            foreach(static::$css as $css){
                echo <<<CSS
                    {$css}
CSS;
            }
        }
return;
    }

    public  function getNavBar() : NavBar
    {
        if (is_null($this->navBar)) {
            $this->navBar = new Navbar();
        }
        return $this->navBar;
    }

    /**
     * Add js or get all js.
     *
     * @param null $js
     *
     * @return \Illuminate\View\View
     */
    public static function js($js = null) : View
    {
        if (!is_null($js)) {
            self::$js = array_merge(self::$js, (array) $js);
        }

        $js = array_get(Form::collectFieldAssets()->toArray(), 'js', []);

        static::$js = array_merge(static::$js, $js);

        return view('components.partials.js', ['js' => array_unique(static::$js)]);
    }

    /**
     * Add js or get all css link.
     *
     * @param null $link
     *
     * @return \Illuminate\View\View
     */
    public static function link($link = null) : View
    {
        if (!is_null($link)) {
            self::$link = array_merge(self::$link, (array) $link);
        }

        $link = array_get(Form::collectFieldAssets()->toArray(), 'link', []);

        static::$link = array_merge(static::$link, $link);

        return view('components.partials.css', ['link' => array_unique(static::$link)]);
    }

    /**
     * @param $model
     *
     * @return mixed
     */
    public function getModel($model)
    {
        if ($model instanceof EloquentModel) {
            return $model;
        }

        if (is_string($model) && class_exists($model)) {
            return $this->getModel(new $model());
        }

        throw new InvalidArgumentException("$model is not a valid model");
    }

    /**
     * @param string $script
     *
     * @return \Illuminate\View\View
     */
    public static function script($script = '') : View
    {
        if (!empty($script)) {
            self::$script = array_merge(self::$script, (array) $script);
        }

        return view('components.partials.script', ['script' => array_unique(self::$script)]);
    }

    /**
     * Get admin title.
     *
     * @return Config
     */
    public function title()
    {
        return config('admin.title');
    }

    /**
     * Get current login user.
     *
     * @return mixed
     */
    public function user()
    {
        return Auth::guard('admin')->user();
    }

    public static function jsLoad($js = null, $script = '')
    {
        if($js){
            JsLoader::getInstance()->js($js, $script);
        }
        return JsLoader::getInstance()->render();
    }

    public static function extend($name, $class)
    {
        static::$extensions[$name] = $class;
    }
}