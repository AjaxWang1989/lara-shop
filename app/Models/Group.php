<?php

namespace App\Models;

use App\Jobs\GroupOverDate;
use App\Models\Traits\ModelTrait;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\Group
 *
 * @property int $id
 * @property int $group_coupon_id 团购活动ID
 * @property string|null $group_coupon_code
 * @property int $leader_user_id 团长用户id
 * @property int $remaining_num 拼团剩余人数
 * @property string $code 拼团编号
 * @property int $opened_at 开团时间
 * @property int $auto_cancel_at 未成团时自动取消拼团时间
 * @property int $patched_at 完成拼团时间
 * @property string $status 拼团状态:OPENING 开团待付款 PATCHING 拼团中 FULL 满员待成员付款 PATCHED 完成拼团 OVER_DATE 团购过期 INVALID 团购失效 CANCEL 拼团关闭
 * @property string $cancel 关闭状态：AUTO_CANCEL 拼团过期 BUYER_REFUND 买家退款 SELLER_CANCEL 卖家主动取消拼团
 * @property \Carbon\Carbon|null $created_at
 * @property \Carbon\Carbon|null $updated_at
 * @property string|null $deleted_at
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group deleteByIds($ids)
 * @method static bool|null forceDelete()
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Group onlyTrashed()
 * @method static bool|null restore()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group searchBy($where)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group updateById($id, $data)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group whereAutoCancelAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group whereCancel($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group whereCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group whereGroupCouponCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group whereGroupCouponId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group whereLeaderUserId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group whereOpenedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group wherePatchedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group whereRemainingNum($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group whereUpdatedAt($value)
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Group withTrashed()
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Group withoutTrashed()
 * @mixin \Eloquent
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\GroupOrder[] $groupOrders
 * @property-read \App\Models\GroupCoupon $groupCoupon
 * @property int $store_id 店铺id
 * @property string $store_code 店铺编号
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group whereStoreCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Group whereStoreId($value)
 */
class Group extends Model
{
    //
    use ModelTrait, SoftDeletes;

    const STATUS = [
        'OPENING' => 'OPENING',
        'PATCHING' => 'PATCHING',
        'FULL' => 'FULL',
        'PATCHED' => 'PATCHED',
        'OVER_DATE' => 'OVER_DATE',
        'INVALID' => 'INVALID',
        'CANCEL'  => 'CANCEL'
    ];

    const STATUS_CN = [
        'OPENING' => '团长未支付',
        'PATCHING' => '拼团中',
        'FULL' => '团购满员',
        'PATCHED' => '团购成功',
        'OVER_DATE' => '团购活动过期',
        'INVALID' => '团购活动失效',
        'CANCEL'  => '取消团购'
    ];

    const CANCEL_TYPE = [
        'AUTO_CANCEL' => 'AUTO_CANCEL',
        'BUYER_REFUND' => 'BUYER_REFUND',
        'SELLER_CANCEL' => 'SELLER_CANCEL'
    ];

    protected $table = "group";

    public $oldStatus = '';

    protected $fillable = [
        'group_coupon_id',
        'group_coupon_code',
        'leader_user_id',
        'remaining_num',
        'status',
        'code',
        'opened_at',
        'patched_at',
        'auto_cancel_at',
        'cancel',
        'deleted_at'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::created(function (Group $group){
            dispatch((new GroupOverDate())->delay($group->auto_cancel_at - time())->onQueue('group-coupon'));
        });
        static::retrieved(function (Group $group){
            $group->oldStatus = $group->status;
        });
        static::updated(function (Group $group){
            $group->groupOrders->map(function (GroupOrder $groupOrder) use(&$group){
                $group->statusChanged($groupOrder);
            });
        });
    }

    protected function statusChanged(GroupOrder $groupOrder)
    {
        if($this->status != $this->oldStatus){
            switch ($this->status){
                case Group::STATUS['OVER_DATE']:
                    $groupOrder->overDate();
                    break;
                case Group::STATUS['OPENING']:
                    break;
                case Group::STATUS['PATCHED'] :
                    //推送成团消息
                    break;
                case Group::STATUS['PATCHING']:
                    break;
                case Group::STATUS['INVALID'] :
                    $groupOrder->invalid();
                    break;
                case Group::STATUS['CANCEL'] :
                    $groupOrder->cancel($this->cancel);
                    break;
                case Group::STATUS['FULL'] :
                    break;
            }
        }
    }
    public function overDate()
    {
        if(in_array($this->status , [Group::STATUS['OPENING'], Group::STATUS['PATCHING'], Group::STATUS['FULL']])){
            $this->oldStatus = $this->status;
            $this->status = Group::STATUS['OVER_DATE'];
            $this->save();
        }
    }

    public function invalid()
    {
        if(in_array($this->status , [Group::STATUS['OPENING'], Group::STATUS['PATCHING'], Group::STATUS['FULL']])){
            $this->oldStatus = $this->status;
            $this->status = Group::STATUS['INVALID'];
            $this->save();
        }
    }

    public function groupCoupon() : BelongsTo
    {
        return $this->belongsTo(GroupCoupon::class, 'group_coupon_id', 'id');
    }

    public function groupOrders() : HasMany
    {
        return $this->hasMany(GroupOrder::class, 'group_id', 'id');
    }
}
