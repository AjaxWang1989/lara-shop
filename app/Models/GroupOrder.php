<?php

namespace App\Models;

use App\Jobs\GroupOrderOverDate;
use App\Models\Traits\ModelTrait;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\GroupOrder
 *
 * @property int $id
 * @property int $group_coupon_id 团购活动ID
 * @property string|null $group_coupon_code
 * @property int $leader_user_id 团长用户id
 * @property int $group_id 拼团ID
 * @property string|null $group_code
 * @property int $order_id 订单id
 * @property string|null $order_code
 * @property int $opened_at 参团时间
 * @property int $auto_cancel_at 未成团时自动取消拼团时间
 * @property string $status 拼团状态:OPENING 开团待付款 PATCHING 拼团中 FULL 满员待成员付款 PATCHED 完成拼团 OVER_DATE 团购过期 INVALID 团购失效 CANCEL 拼团关闭 SEND 发货 COMPLETE 签收或者完成
 * @property string $cancel 关闭状态：AUTO_CANCEL 拼团过期 BUYER_REFUND 买家退款 SELLER_CANCEL 卖家主动取消拼团
 * @property \Carbon\Carbon|null $created_at
 * @property \Carbon\Carbon|null $updated_at
 * @property string|null $deleted_at
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder deleteByIds($ids)
 * @method static \Illuminate\Database\Query\Builder|\App\Models\GroupOrder onlyTrashed()
 * @method static bool|null restore()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder searchBy($where)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder updateById($id, $data)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereAutoCancelAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereCancel($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereGroupCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereGroupCouponCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereGroupCouponId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereGroupId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereLeaderUserId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereOpenedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereOrderCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereOrderId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereUpdatedAt($value)
 * @method static \Illuminate\Database\Query\Builder|\App\Models\GroupOrder withTrashed()
 * @method static \Illuminate\Database\Query\Builder|\App\Models\GroupOrder withoutTrashed()
 * @mixin \Eloquent
 * @property int $buyer_user_id 团长用户id
 * @property int $joined_at 参团时间
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereBuyerUserId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\GroupOrder whereJoinedAt($value)
 * @method static bool|null forceDelete()
 */
class GroupOrder extends Model
{
    //
    use ModelTrait, SoftDeletes;

    const STATUS = [
        'WAIT_PAY' => 'WAIT_PAY',
        'PATCHING' => 'PATCHING',
        'PATCHED'  => 'PATCHED',
        'OVER_DATE'=> 'OVER_DATE',
        'INVALID'  => 'INVALID',
        'CANCEL'   => 'CANCEL',
        'SEND'     => 'SEND',
        'COMPLETE' => 'COMPLETE'
    ];

    const CANCEL_TYPE = [
        'AUTO_CANCEL'   => 'AUTO_CANCEL',
        'BUYER_REFUND'  => 'BUYER_REFUND',
        'SELLER_CANCEL' => 'SELLER_CANCEL'
    ];

    protected $table = "group_order";

    public $oldStatus = "";

    protected $fillable = [
        'group_coupon_id',
        'group_coupon_code',
        'buyer_user_id',
        'order_id',
        'order_code',
        'group_id',
        'group_code'.
        'status',
        'cancel',
        'joined_at',
        'auto_cancel_at',
        'deleted_at'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function (GroupOrder $groupOrder){
            dispatch((new GroupOrderOverDate($groupOrder->id))
                ->delay($groupOrder->auto_cancel_at - time())
                ->onQueue('group-coupon'));
        });
        static::retrieved(function (GroupOrder $groupOrder){
            $groupOrder->oldStatus = $groupOrder->status;
        });

        static::updated(function (GroupOrder $groupOrder){

        });
    }

    protected function statusChanged()
    {

    }

    public function cancel($type)
    {
        if(in_array($this->status, [GroupOrder::STATUS['WAIT_PAY'], GroupOrder::STATUS['PATCHING'], GroupOrder::STATUS['PATCHED']])){
            $this->oldStatus = $this->status;
            $this->status = GroupOrder::STATUS['OVER_DATE'];
            $this->cancel = GroupOrder::CANCEL_TYPE[$type];
            $this->save();
        }
    }

    public function overDate()
    {
        if(in_array($this->status, [GroupOrder::STATUS['WAIT_PAY'], GroupOrder::STATUS['PATCHING']])){
            $this->oldStatus = $this->status;
            $this->status = GroupOrder::STATUS['OVER_DATE'];
            $this->save();
        }
    }

    public function invalid()
    {
        if(in_array($this->status, [GroupOrder::STATUS['WAIT_PAY'], GroupOrder::STATUS['PATCHING']])){
            $this->oldStatus = $this->status;
            $this->status = GroupOrder::STATUS['INVALID'];
            $this->save();
        }
    }
}
